[{"/home/kylan/Desktop/web-projects/javascript-exercises/memory-card/src/index.js":"1","/home/kylan/Desktop/web-projects/javascript-exercises/memory-card/src/App.js":"2","/home/kylan/Desktop/web-projects/javascript-exercises/memory-card/src/components/Card.js":"3","/home/kylan/Desktop/web-projects/javascript-exercises/memory-card/src/components/Game.js":"4"},{"size":220,"mtime":1607453020972,"results":"5","hashOfConfig":"6"},{"size":590,"mtime":1607458364440,"results":"7","hashOfConfig":"6"},{"size":270,"mtime":1607458374740,"results":"8","hashOfConfig":"6"},{"size":1315,"mtime":1607458429104,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1o721pr",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/home/kylan/Desktop/web-projects/javascript-exercises/memory-card/src/index.js",[],["20","21"],"/home/kylan/Desktop/web-projects/javascript-exercises/memory-card/src/App.js",[],"/home/kylan/Desktop/web-projects/javascript-exercises/memory-card/src/components/Card.js",[],"/home/kylan/Desktop/web-projects/javascript-exercises/memory-card/src/components/Game.js",["22"],"import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport Card from \"./Card\";\nimport uniqid from \"uniqid\";\n\nfunction Game(props) {\n  const [score, setScore] = useState(-1);\n  const [highScore, setHighScore] = useState(0);\n  const [seen, setSeen] = useState([]);\n  const cardPool = props.cards;\n  const [currentCards, setCurrentCards] = useState(_.sampleSize(cardPool, 4));\n\n  useEffect(() => {\n    setCurrentCards(_.sampleSize(cardPool, 4));\n    if (new Set(seen).size !== seen.length) {\n      if (score > highScore) {\n        setHighScore(score);\n      }\n      setSeen([]);\n      setScore(-1);\n    } else {\n      setScore((prevScore) => prevScore + 1);\n    }\n  }, [seen]);\n\n  return (\n    <div>\n      <h1>Memory Cards - SMITE edition</h1>\n      <p>\n        Try to only click gods you haven't selected before. Score will reset on\n        selecting a god twice.\n      </p>\n      <h2>Current Score: {score} </h2>\n      <h2>High Score: {highScore} </h2>\n      {currentCards.map((card) => {\n        return (\n          <Card\n            key={uniqid()}\n            name={card.name}\n            image={card.image}\n            handleClick={() =>\n              setSeen((prevSeen) => prevSeen.concat(card.name))\n            }\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Game;\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":24,"column":6,"nodeType":"29","endLine":24,"endColumn":12,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cardPool', 'highScore', and 'score'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setHighScore' needs the current value of 'score'.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [cardPool, highScore, score, seen]",{"range":"36","text":"37"},[690,696],"[cardPool, highScore, score, seen]"]